import { ref, computed } from 'vue';
// import { useI18n as useVueI18n } from 'vue-i18n'; // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
export type SupportedLocale = 'ru' | 'en';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —è–∑—ã–∫–∞
const currentLocale = ref<SupportedLocale>('ru');

// –ü—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (fallback)
const fallbackTranslations = {
  ru: {
    'languages.ru': '–†—É—Å—Å–∫–∏–π',
    'languages.en': 'English',
    'dashboard.title': '–î–∞—à–±–æ—Ä–¥',
    'dashboard.welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Music Practice Tracker!',
    'dashboard.description': '–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.',
    'dashboard.features': '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
    'dashboard.feature1': '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π',
    'dashboard.feature2': '–¢–∞–π–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
    'dashboard.feature3': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
    'dashboard.feature4': '–®–∞–±–ª–æ–Ω—ã –∑–∞–Ω—è—Ç–∏–π',
    'dashboard.howToStart': '–ö–∞–∫ –Ω–∞—á–∞—Ç—å',
    'dashboard.step1': '–°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ',
    'dashboard.step2': '–î–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–∞–º–∏',
    'dashboard.step3': '–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º',
    'dashboard.step4': '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
    'dashboard.showAll': '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ',
    'navigation.dashboard': '–î–∞—à–±–æ—Ä–¥',
    'navigation.profile': '–ü—Ä–æ—Ñ–∏–ª—å',
    'navigation.logout': '–í—ã–π—Ç–∏',
  },
  en: {
    'languages.ru': '–†—É—Å—Å–∫–∏–π', 
    'languages.en': 'English',
    'dashboard.title': 'Dashboard',
    'dashboard.welcome': 'Welcome to Music Practice Tracker!',
    'dashboard.description': 'This is your personal assistant for planning and tracking music practice sessions. Here you can create structured sessions, use timers for exercises, and track your progress.',
    'dashboard.features': 'Features',
    'dashboard.feature1': 'Creating structured practice sessions',
    'dashboard.feature2': 'Timers for each exercise',
    'dashboard.feature3': 'Progress tracking',
    'dashboard.feature4': 'Session templates',
    'dashboard.howToStart': 'How to get started',
    'dashboard.step1': 'Create your first session',
    'dashboard.step2': 'Add exercises with timers',
    'dashboard.step3': 'Start the session and track progress',
    'dashboard.step4': 'Create templates for reuse',
    'dashboard.showAll': 'Show all',
    'navigation.dashboard': 'Dashboard',
    'navigation.profile': 'Profile',
    'navigation.logout': 'Log Out',
  },
};

export function useSimpleI18n() {
  // –û—Ç–∫–ª—é—á–∞–µ–º vue-i18n –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
  const getCurrentLocale = computed(() => currentLocale.value);

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–º
  const isRussian = computed(() => currentLocale.value === 'ru');

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
  const isEnglish = computed(() => currentLocale.value === 'en');

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫
  const setLocale = (newLocale: SupportedLocale) => {
    currentLocale.value = newLocale;
    try {
      localStorage.setItem('locale', newLocale);
      document.documentElement.lang = newLocale;
    } catch (error) {
      console.warn('Error saving locale:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
  const loadLocale = () => {
    try {
      const savedLocale = localStorage.getItem('locale') as SupportedLocale;
      if (savedLocale && (savedLocale === 'ru' || savedLocale === 'en')) {
        setLocale(savedLocale);
      } else {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
        const browserLocale = navigator.language.split('-')[0];
        if (browserLocale === 'ru') {
          setLocale('ru');
        } else {
          setLocale('en');
        }
      }
    } catch (error) {
      console.warn('Error loading locale:', error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      currentLocale.value = 'ru';
      localStorage.setItem('locale', 'ru');
      document.documentElement.lang = 'ru';
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫
  const toggleLocale = () => {
    const newLocale = currentLocale.value === 'ru' ? 'en' : 'ru';
    setLocale(newLocale);
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
  const availableLocales = computed(() => [
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
  ]);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã)
  const t = (key: string) => {
    try {
      const translations = fallbackTranslations[currentLocale.value] as Record<string, string>;
      return translations[key] || key;
    } catch (error) {
      console.warn('Error using translations:', error);
      return key;
    }
  };

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    currentLocale: getCurrentLocale,
    isRussian,
    isEnglish,
    availableLocales,
    
    // –ú–µ—Ç–æ–¥—ã
    setLocale,
    loadLocale,
    toggleLocale,
    
    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    t,
  };
}