import { ref, computed } from 'vue'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Pomodoro
 */
export interface PomodoroSettings {
    totalCycles: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —Ü–∏–∫–ª–æ–≤
    workDuration: number
    shortBreak: number
    longBreak: number
    cyclesBeforeLongBreak: number
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–ª–æ—Ç–∞ Pomodoro
 */
export interface PomodoroSlot {
    title: string
    type: 'custom' | 'break'
    duration: number
    cycleNumber: number
    description: string
}

/**
 * Composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pomodoro-—Ä–µ–∂–∏–º–æ–º
 */
export function usePomodoro() {
    const settings = ref<PomodoroSettings>({
        totalCycles: 4,
        workDuration: 25,
        shortBreak: 5,
        longBreak: 15,
        cyclesBeforeLongBreak: 4,
    })

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ª–æ—Ç—ã Pomodoro –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤
     */
    const calculateSlots = (customSettings?: Partial<PomodoroSettings>): PomodoroSlot[] => {
        const config = { ...settings.value, ...customSettings }
        const slots: PomodoroSlot[] = []

        for (let cycleNumber = 1; cycleNumber <= config.totalCycles; cycleNumber++) {
            // –†–∞–±–æ—á–∏–π —Å–ª–æ—Ç
            slots.push({
                title: `–†–∞–±–æ—Ç–∞ (—Ü–∏–∫–ª ${cycleNumber})`,
                type: 'custom',
                duration: config.workDuration,
                cycleNumber,
                description: `Pomodoro: —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ${config.workDuration} –º–∏–Ω—É—Ç`,
            })

            // –ü–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–∏–∫–ª–∞)
            if (cycleNumber < config.totalCycles) {
                if (cycleNumber % config.cyclesBeforeLongBreak === 0) {
                    // –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
                    slots.push({
                        title: '–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤',
                        type: 'break',
                        duration: config.longBreak,
                        cycleNumber,
                        description: `Pomodoro: –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ ${config.longBreak} –º–∏–Ω—É—Ç`,
                    })
                } else {
                    // –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤
                    slots.push({
                        title: '–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤',
                        type: 'break',
                        duration: config.shortBreak,
                        cycleNumber,
                        description: `Pomodoro: –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ ${config.shortBreak} –º–∏–Ω—É—Ç`,
                    })
                }
            }
        }

        return slots
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
     */
    const calculateTotalMinutes = (customSettings?: Partial<PomodoroSettings>): number => {
        const config = { ...settings.value, ...customSettings }
        let totalMinutes = 0

        // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        totalMinutes += config.totalCycles * config.workDuration

        // –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        const totalBreaks = config.totalCycles - 1 // –ü–µ—Ä–µ—Ä—ã–≤–æ–≤ –Ω–∞ 1 –º–µ–Ω—å—à–µ —á–µ–º —Ü–∏–∫–ª–æ–≤
        if (totalBreaks > 0) {
            const longBreaksCount = Math.floor(config.totalCycles / config.cyclesBeforeLongBreak)
            const shortBreaksCount = totalBreaks - longBreaksCount

            totalMinutes += longBreaksCount * config.longBreak
            totalMinutes += shortBreaksCount * config.shortBreak
        }

        return totalMinutes
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
     */
    const getSchedulePreview = (slots: PomodoroSlot[]): string => {
        return slots
            .map(slot => {
                const icon = slot.type === 'custom' ? 'üî•' : '‚òï'
                return `${icon} ${slot.title} (${slot.duration} –º–∏–Ω)`
            })
            .join(' ‚Üí ')
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–≤—å—é (–ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ—Ç–∞)
     */
    const getShortPreview = (slots: PomodoroSlot[]): string => {
        const preview = slots.slice(0, 3).map(slot => {
            const icon = slot.type === 'custom' ? 'üî•' : '‚òï'
            return `${icon} ${slot.duration}–º`
        })

        if (slots.length > 3) {
            preview.push('...')
        }

        return preview.join(' ‚Üí ')
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —Ü–∏–∫–ª–æ–≤
     */
    const calculateTotalCycles = (slots: PomodoroSlot[]): number => {
        return slots.filter(slot => slot.type === 'custom').length
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    const validateSettings = (config: PomodoroSettings): { valid: boolean; errors: string[] } => {
        const errors: string[] = []

        if (config.totalCycles < 1) {
            errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1')
        }

        if (config.workDuration < 1) {
            errors.push('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã')
        }

        if (config.shortBreak < 0) {
            errors.push('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π')
        }

        if (config.longBreak < 0) {
            errors.push('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π')
        }

        if (config.cyclesBeforeLongBreak < 1) {
            errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1')
        }

        return {
            valid: errors.length === 0,
            errors,
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Å–ª–æ—Ç–∞
     */
    const getSlotIcon = (type: 'custom' | 'break'): string => {
        switch (type) {
            case 'custom':
                return 'üî•'
            case 'break':
                return '‚òï'
            default:
                return '‚è±Ô∏è'
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–∏–ø–∞ —Å–ª–æ—Ç–∞ (Tailwind –∫–ª–∞—Å—Å—ã)
     */
    const getSlotColorClass = (type: 'custom' | 'break'): string => {
        switch (type) {
            case 'custom':
                return 'bg-danger-100 text-danger-600 border-danger-200 dark:bg-danger-900/20 dark:text-danger-300 dark:border-danger-800'
            case 'break':
                return 'bg-primary-100 text-primary-600 border-primary-200 dark:bg-primary-900/20 dark:text-primary-300 dark:border-primary-800'
            default:
                return 'bg-neutral-100 text-neutral-600 border-neutral-200 dark:bg-neutral-700 dark:text-neutral-300 dark:border-neutral-600'
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Å–ª–æ—Ç–æ–≤
     */
    const slots = computed(() => calculateSlots())

    /**
     * –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤
     */
    const totalCycles = computed(() => calculateTotalCycles(slots.value))

    /**
     * –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–µ–≤—å—é
     */
    const schedulePreview = computed(() => getSchedulePreview(slots.value))

    /**
     * –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—Ä–µ–≤—å—é
     */
    const shortPreview = computed(() => getShortPreview(slots.value))

    return {
        settings,
        slots,
        totalCycles,
        schedulePreview,
        shortPreview,
        calculateSlots,
        calculateTotalMinutes,
        getSchedulePreview,
        getShortPreview,
        calculateTotalCycles,
        validateSettings,
        getSlotIcon,
        getSlotColorClass,
    }
}