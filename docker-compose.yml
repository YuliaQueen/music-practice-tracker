version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: music-tracker-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: music_tracker
      MYSQL_USER: music_tracker
      MYSQL_PASSWORD: music_tracker_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - music-tracker-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: music-tracker-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - music-tracker-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: music-tracker-minio
    restart: unless-stopped
    ports:
      - "9000:9000"      # API port
      - "9001:9001"      # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - music-tracker-network

  # MinIO Client for bucket creation
  minio-setup:
    image: minio/mc:latest
    container_name: music-tracker-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/music-tracker-notes --ignore-existing;
      /usr/bin/mc policy set public myminio/music-tracker-notes;
      exit 0;
      "
    networks:
      - music-tracker-network

  # PHP-FPM Application
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: music-tracker-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=music_tracker
      - DB_USERNAME=music_tracker
      - DB_PASSWORD=music_tracker_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=music-tracker-notes
      - MINIO_URL=http://localhost:9000
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    networks:
      - music-tracker-network

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: music-tracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
    networks:
      - music-tracker-network

  # Node.js for frontend build
  node:
    image: node:18-alpine
    container_name: music-tracker-node
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    command: sh -c "npm install && npm run build && tail -f /dev/null"
    networks:
      - music-tracker-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  music-tracker-network:
    driver: bridge