<?php

declare(strict_types=1);

namespace App\Services;

use Illuminate\Support\Facades\Log;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pomodoro-—Å–µ—Å—Å–∏—è–º–∏
 */
class PomodoroService
{
    /**
     * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª–æ—Ç–∞ (–º–∏–Ω—É—Ç—ã)
     */
    private const MIN_SLOT_DURATION = 1;

    /**
     * –¢–∏–ø—ã —Å–ª–æ—Ç–æ–≤ Pomodoro
     */
    private const SLOT_TYPE_WORK  = 'custom';
    private const SLOT_TYPE_BREAK = 'break';

    /**
     * –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π
     */
    private const DESCRIPTION_PREFIX  = 'Pomodoro: ';
    private const WORK_TITLE_TEMPLATE = '–†–∞–±–æ—Ç–∞ (—Ü–∏–∫–ª %d)';
    private const SHORT_BREAK_TITLE   = '–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤';
    private const LONG_BREAK_TITLE    = '–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤';

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ª–æ—Ç—ã Pomodoro –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     *
     * @param int $totalMinutes          –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
     * @param int $workDuration          –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ —Å–ª–æ—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
     * @param int $shortBreak            –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
     * @param int $longBreak             –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
     * @param int $cyclesBeforeLongBreak –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
     * @return array{success: bool, slots?: array, totalCycles?: int, message: string}
     */
    public function calculatePomodoroSlots(
        int $totalMinutes,
        int $workDuration = 25,
        int $shortBreak = 5,
        int $longBreak = 15,
        int $cyclesBeforeLongBreak = 4
    ): array {
        try {
            $validation = $this->validatePomodoroSettings(
                $totalMinutes,
                $workDuration,
                $shortBreak,
                $longBreak,
                $cyclesBeforeLongBreak
            );

            if (!$validation['valid']) {
                return [
                    'success' => false,
                    'message' => implode(', ', $validation['errors']),
                ];
            }

            $slots           = [];
            $remainingTime   = $totalMinutes;
            $cycleNumber     = 0;
            $completedCycles = 0;

            while ($remainingTime > 0) {
                $cycleNumber++;

                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–π —Å–ª–æ—Ç
                $workSlotDuration = min($workDuration, $remainingTime);
                $slots[]          = $this->createWorkSlot($cycleNumber, $workSlotDuration);
                $remainingTime    -= $workSlotDuration;
                $completedCycles++;

                // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
                if ($remainingTime <= 0) {
                    break;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
                $isLongBreak   = ($cycleNumber % $cyclesBeforeLongBreak === 0);
                $breakDuration = min($isLongBreak ? $longBreak : $shortBreak, $remainingTime);

                if ($breakDuration > 0) {
                    $slots[]       = $this->createBreakSlot($cycleNumber, $breakDuration, $isLongBreak);
                    $remainingTime -= $breakDuration;
                }
            }

            return [
                'success'     => true,
                'slots'       => $slots,
                'totalCycles' => $completedCycles,
                'message'     => "–°–æ–∑–¥–∞–Ω–æ {$completedCycles} —Ä–∞–±–æ—á–∏—Ö —Ü–∏–∫–ª–æ–≤ Pomodoro",
            ];
        } catch (\Throwable $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Pomodoro —Å–ª–æ—Ç–æ–≤', [
                'total_minutes' => $totalMinutes,
                'error'         => $e->getMessage(),
                'trace'         => $e->getTraceAsString(),
            ]);

            return [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–ª–æ—Ç–æ–≤ Pomodoro',
            ];
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è Pomodoro –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
     *
     * @param array $slots –ú–∞—Å—Å–∏–≤ —Å–ª–æ—Ç–æ–≤
     * @return string
     */
    public function generateSchedulePreview(array $slots): string
    {
        $preview = [];

        foreach ($slots as $slot) {
            $icon = match ($slot['type']) {
                'work' => 'üî•',
                'short_break' => '‚òï',
                'long_break' => 'üåü',
                default => '‚è±Ô∏è',
            };

            $preview[] = "{$icon} {$slot['title']} ({$slot['duration']} –º–∏–Ω)";
        }

        return implode(' ‚Üí ', $preview);
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Pomodoro (—Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
     *
     * @param int $totalMinutes
     * @param int $workDuration
     * @param int $shortBreak
     * @param int $longBreak
     * @param int $cyclesBeforeLongBreak
     * @return array{valid: bool, errors: array}
     */
    public function validatePomodoroSettings(
        int $totalMinutes,
        int $workDuration,
        int $shortBreak,
        int $longBreak,
        int $cyclesBeforeLongBreak
    ): array {
        $errors = [];

        if ($totalMinutes < self::MIN_SLOT_DURATION) {
            $errors[] = '–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ' . self::MIN_SLOT_DURATION . ' –º–∏–Ω—É—Ç—ã';
        }

        if ($workDuration < self::MIN_SLOT_DURATION) {
            $errors[] = '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ' . self::MIN_SLOT_DURATION . ' –º–∏–Ω—É—Ç—ã';
        }

        if ($shortBreak < 0) {
            $errors[] = '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π';
        }

        if ($longBreak < 0) {
            $errors[] = '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π';
        }

        if ($cyclesBeforeLongBreak < self::MIN_SLOT_DURATION) {
            $errors[] = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ' . self::MIN_SLOT_DURATION;
        }

        if ($totalMinutes < $workDuration) {
            $errors[] = '–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å–ª–æ—Ç–∞';
        }

        return [
            'valid'  => empty($errors),
            'errors' => $errors,
        ];
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–∏–π —Å–ª–æ—Ç
     *
     * @param int $cycleNumber
     * @param int $duration
     * @return array
     */
    private function createWorkSlot(int $cycleNumber, int $duration): array
    {
        return [
            'title'        => sprintf(self::WORK_TITLE_TEMPLATE, $cycleNumber),
            'type'         => self::SLOT_TYPE_WORK,
            'duration'     => $duration,
            'cycle_number' => $cycleNumber,
            'description'  => self::DESCRIPTION_PREFIX . "—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ {$duration} –º–∏–Ω—É—Ç",
        ];
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞
     *
     * @param int  $cycleNumber
     * @param int  $duration
     * @param bool $isLongBreak
     * @return array
     */
    private function createBreakSlot(int $cycleNumber, int $duration, bool $isLongBreak): array
    {
        $title = $isLongBreak ? self::LONG_BREAK_TITLE : self::SHORT_BREAK_TITLE;
        $type  = $isLongBreak ? '–¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤' : '–∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤';

        return [
            'title'        => $title,
            'type'         => self::SLOT_TYPE_BREAK,
            'duration'     => $duration,
            'cycle_number' => $cycleNumber,
            'description'  => self::DESCRIPTION_PREFIX . "{$type} {$duration} –º–∏–Ω—É—Ç",
        ];
    }
}
